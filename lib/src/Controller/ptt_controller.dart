import 'package:flutter/foundation.dart';

class PttController {
  // Bandera para verificar si PTT est√° activo
  bool _isPTTActive = false;

  bool get isPTTActive => _isPTTActive;

  /// Activar PTT (BT Classic + Micr√≥fono)
  void activatePTT() {
    if (!_isPTTActive) {
      // Enviar el protocolo para activar PTT
      _sendPttCommand();

      // Aqu√≠ puedes iniciar la captura de audio o cualquier otro proceso
      startMicCapture();

      _isPTTActive = true;
      debugPrint("‚úÖ PTT activado: BT Classic y micr√≥fono activos.");
    }
  }

  /// Desactivar PTT (BT Classic + Micr√≥fono)
  void deactivatePTT() {
    if (_isPTTActive) {
      // Enviar el mismo protocolo para alternar a desactivado
      _sendPttCommand();

      // Aqu√≠ puedes detener la captura de audio o cualquier otro proceso
      stopMicCapture();

      _isPTTActive = false;
      debugPrint("‚õî PTT desactivado: BT Classic y micr√≥fono desactivados.");
    }
  }

  // Funci√≥n ficticia para enviar el comando PTT
  void _sendPttCommand() {
    List<int> frame = [0xAA, 0x14, 0x11, 0x44, 0x32, 0x29, 0xFF];
    // Aqu√≠ puedes integrar un m√©todo para enviar el comando
    debugPrint(
      "üîÑ Comando PTT enviado: ${frame.map((e) => e.toRadixString(16)).join(' ')}",
    );
  }

  // Funciones ficticias para iniciar/detener captura de audio
  void startMicCapture() {
    // L√≥gica para iniciar la captura de audio
    debugPrint("üé§ Micr√≥fono capturando audio...");
  }

  void stopMicCapture() {
    // L√≥gica para detener la captura de audio
    debugPrint("‚õî Micr√≥fono detenido.");
  }
}
